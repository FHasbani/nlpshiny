shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp("App-1")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shiny)
?fluidRow
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?textInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?textInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
?textInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?column
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
getwd
getwd()
source(models.R)
source('models.R')
source('models.R')
load('ngram0.RData')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?mainPanel
View(trigramDF)
View(bigramDF)
predict0('I am want')
predict0('I am want',unigramDF,bigramDF,trigramDF)
predict0('I am able',unigramDF,bigramDF,trigramDF)
predict0('I am able find',unigramDF,bigramDF,trigramDF)
predict0('I am able find way',unigramDF,bigramDF,trigramDF)
predict0('I am able find way back',unigramDF,bigramDF,trigramDF)
predict0('I am able find way back home',unigramDF,bigramDF,trigramDF)
predict0('I am able',unigramDF,bigramDF,trigramDF)
source('models.R')
predict0('I am able',unigramDF,bigramDF,trigramDF)
a <- c(1,3,2,4)
b <- c(1,2)
a in b
a %in% b
unigramDF$freq/nrow(unigramDF)
View(unigramDF)
source('models.R')
predict0('I am able',unigramDF,bigramDF,trigramDF)
predict0('I am able make',unigramDF,bigramDF,trigramDF)
source('models.R')
predict0('I am able make',unigramDF,bigramDF,trigramDF)
useuni <- unigramDF[order(unigramDF$s,decreasing = T),]
unigramDF$s <- unigramDF$freq/nrow(unigramDF)*0.16
useuni <- unigramDF[order(unigramDF$s,decreasing = T),]
useunia <- useuni[1:maxResults,]
useunia <- useuni[1:10,]
usetri<-subtri[order(subtri$freq,decreasing=T),]
predict0('I am able make',unigramDF,bigramDF,trigramDF)
source('models.R')
predict0('I am able make',unigramDF,bigramDF,trigramDF)
View(useunia)
input <- 'I am able make'
seektri<-grepl(paste0("^",input,"$"),trigramDF$bigram)
subtri<-trigramDF[seektri,]
input2 <- unlist(strsplit(input," "))[2]
seekbi <- grepl(paste0("^",input2,"$"),bigramDF$unigram)
subbi <- bigramDF[seekbi,]
unigramDF$s <- unigramDF$freq/nrow(unigramDF)*0.16
useuni <- unigramDF[order(unigramDF$s,decreasing = T),]
useunia <- useuni[1:maxResults,]
maxResults=10
useunia <- useuni[1:maxResults,]
if (sum(seektri) == 0) {
if(sum(seekbi)==0){
return(head(unigramDF[order(unigramDF$freq,decreasing = T),1],maxResults))
}
subbi$s <- 0.4*subbi$freq/sum(seekbi)
names <- c(subbi$name,useunia$unigram)
score <- c(subbi$s,useunia$s)
predictWord <- data.frame(next_word=names,score=score,stringsAsFactors = F)
predictWord <- predictWord[order(predictWord$score,decreasing = T),]
return(predictWord[1:maxResults,1])
}
input <- rev(unlist(strsplit(input," ")))
input <- setdiff(input,sw)
input <- paste(input[2],input[1],sep = ' ')
input <- tolower(input)
seektri<-grepl(paste0("^",input,"$"),trigramDF$bigram)
subtri<-trigramDF[seektri,]
input2 <- unlist(strsplit(input," "))[2]
seekbi <- grepl(paste0("^",input2,"$"),bigramDF$unigram)
subbi <- bigramDF[seekbi,]
unigramDF$s <- unigramDF$freq/nrow(unigramDF)*0.16
useuni <- unigramDF[order(unigramDF$s,decreasing = T),]
useunia <- useuni[1:maxResults,]
subtri$s <- subtri$freq/sum(subtri$freq)
subbi$s <- 0.4*subbi$freq/sum(seekbi)
names <- c(subtri$name,subbi$name,useunia$unigram)
score <- c(subtri$s,subbi$s,useunia$s)
predictWord <- data.frame(next_word=names,score=score,stringsAsFactors = F)
predictWord <- predictWord[order(predictWord$score,decreasing = T),]
return(predictWord[1:maxResults,1])
View(predictWord)
predictWord[1:maxResults,1]
source('models.R')
predict0('I am able make',unigramDF,bigramDF,trigramDF)
predict0('I am able make sure',unigramDF,bigramDF,trigramDF)
predict0('I am able make sure will',unigramDF,bigramDF,trigramDF)
predict0('I am able make sure will get',unigramDF,bigramDF,trigramDF)
predict0('I I I I',unigramDF,bigramDF,trigramDF)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
renderText
?renderText
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(predictWord)
View(trigramDF)
shiny::runApp()
input <- 'abcs good'
input <- rev(unlist(strsplit(input," ")))
input <- setdiff(input,sw)
input <- paste(input[2],input[1],sep = ' ')
input <- tolower(input)
seektri<-grepl(paste0("^",input,"$"),trigramDF$bigram)
subtri<-trigramDF[seektri,]
input2 <- unlist(strsplit(input," "))[2]
seekbi <- grepl(paste0("^",input2,"$"),bigramDF$unigram)
subbi <- bigramDF[seekbi,]
unigramDF$s <- unigramDF$freq/nrow(unigramDF)*0.16
useuni <- unigramDF[order(unigramDF$s,decreasing = T),]
useunia <- useuni[1:maxResults,]
if (sum(seektri) == 0) {
if(sum(seekbi)==0){
return(head(unigramDF[order(unigramDF$freq,decreasing = T),1],maxResults))
}
subbi$s <- 0.4*subbi$freq/sum(seekbi)
names <- c(subbi$name,useunia$unigram)
score <- c(subbi$s,useunia$s)
predictWord <- data.frame(next_word=names,score=score,stringsAsFactors = F)
predictWord <- predictWord[order(predictWord$score,decreasing = T),]
return(predictWord[1:maxResults,1])
}
subtri$s <- subtri$freq/sum(subtri$freq)
names <- c(subtri$name,subbi$name,useunia$unigram)
score <- c(subtri$s,subbi$s,useunia$s)
predictWord <- data.frame(next_word=names,score=score,stringsAsFactors = F)
subtri
predictWord <- data.frame(next_word=names,score=score,stringsAsFactors = F)
names
score
subbi$name
subbi$s
shiny::runApp()
shiny::runApp()
runExample("07_widgets")
shiny::runApp()
runExample("06_tabsets")
shiny::runApp()
runExample("06_tabsets")
runExample("07_widgets")
shiny::runApp()
shiny::runApp()
shiny::runApp()
?tabPanel
shiny::runApp()
shiny::runApp()
source('models.R')
predict0('The guy in front of me just bought a pound of bacon, a bouquet, and a case of',unigramDF,bigramDF,trigramDF)
predictKN('The guy in front of me just bought a pound of bacon, a bouquet, and a case of',unigramDF,bigramDF,trigramDF)
predictKN('You're the reason why I smile everyday. Can you follow me please? It would mean the',unigramDF,bigramDF,trigramDF)
predictKN("You're the reason why I smile everyday. Can you follow me please? It would mean the",unigramDF,bigramDF,trigramDF)
predictKN("Hey sunshine, can you follow me and make me the",unigramDF,bigramDF,trigramDF)
predictKN("Very early observations on the Bills game: Offense still struggling but the",unigramDF,bigramDF,trigramDF)
predictKN("Go on a romantic date at the",unigramDF,bigramDF,trigramDF)
predictKN("Well I'm pretty sure my granny has some old bagpipes in her garage I'll dust them off and be on my",unigramDF,bigramDF,trigramDF)
predictKN("Ohhhhh #PointBreak is on tomorrow. Love that film and haven't seen it in quite some",unigramDF,bigramDF,trigramDF)
predictKN("After the ice bucket challenge Louis will push his long wet hair out of his eyes with his little",unigramDF,bigramDF,trigramDF)
predictKN("Be grateful for the good times and keep the faith during the",unigramDF,bigramDF,trigramDF)
predictKN("f this isn't the cutest thing you've ever seen, then you must be",unigramDF,bigramDF,trigramDF)
shiny::runApp()
c <- c(3,3,3,2,1,1)
unique(c)
c <- c(3,3,3,2,3,3,3,3,1,1)
unique(c)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?tabPanel
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?textOutput
shiny::runApp()
shiny::runApp()
shiny::runApp()
a()
?a()
?a
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
is.na
?is.na
is.na(c(NA,1,3))
shiny::runApp()
shiny::runApp()
shiny::runApp()
load('ngram0.RData')
predictKN('i i i  i', unigramDF,bigramDF,trigramDF)
shiny::runApp()
predictKN('i i i  i', unigramDF,bigramDF,trigramDF)
input <- 'i i i i'
input <- rev(unlist(strsplit(input," ")))
input <- setdiff(input,sw)
input <- paste(input[2],input[1],sep = ' ')
input <- tolower(input)
input2 <- unlist(strsplit(input," "))[2]
seekcw1w2<-grepl(paste0("^",input,"$"),trigramDF$bigram)
subtri<-trigramDF[seekcw1w2,]
cw1w2 <- sum(subtri$freq)
nw1w2 <- sum(seekcw1w2)
seekW2<-grepl(paste0(input2,"$"),trigramDF$bigram)
W2 <- sum(seekW2)
p3 <- D3*nw1w2/cw1w2
# get c(w2.), n(w2.) and n(..) from bigram
seekcw2 <- grepl(input2,bigramDF$unigram)
subbi <- bigramDF[seekcw2,]
cw2 <- sum(subbi$freq)
nw2 <- sum(seekcw2)
nw <- nrow(bigramDF)
p2 <- D3*nw2/cw2/nw
p1 <- D2*nw2/cw2/nw
predictKN2(input2,D2,p1,subbi,nw2,unigramDF,bigramDF,maxResults = maxResults
)
predictKN2(input2,0.1,p1,subbi,nw2,unigramDF,bigramDF,maxResults = maxResults)
predictKN2(input2,0.1,0.1,subbi,nw2,unigramDF,bigramDF,maxResults = maxResults)
predict0(input2,unigramDF,bigramDF,trigramDF,maxResults = maxResults)
predict0(input2,unigramDF,bigramDF,trigramDF,maxResults = 3)
predict0(input,unigramDF,bigramDF,trigramDF,maxResults = 3)
shiny::runApp()
shiny::runApp()
shiny::runApp()
grepl
?grepl
library(tm)
?removePunctuation
removePunctuation('I am , wangt to go')
removePunctuation('I am , wangt 2000 to go')
input <- rev(unlist(strsplit('I am , wangt 2000 to go'," ")))
input
input <- 'I am , wangt 2000 to go'
input <- removePunctuation(input)
input <- removeNumbers(input)
input <- rev(unlist(strsplit(input," ")))
input <- setdiff(input,sw)
library(tm)
sw <- stopwords(kind = "en")
input <- setdiff(input,sw)
input <- paste(input[2],input[1],sep = ' ')
input <- 'I am , wangt 2000 to go'
input <- removePunctuation(input)
input <- removeNumbers(input)
input <- rev(unlist(strsplit(input," ")))
input <- setdiff(input,sw)
input <- paste(input[2],input[1],sep = ' ')
input <- 'I am , wangt 2000 to go'
input <- removePunctuation(input)
input <- removeNumbers(input)
input <- rev(unlist(strsplit(input," ")))
input <- setdiff(input,sw)
input
removeSparseTerms(input)
grep([:alpha:],input)
grep('[:alpha:]',input)
grepl('[:alpha:]',input)
grepl('[:alpha:]$',input)
input
?grepl
grepl('[:alpha:]',input)
input[grepl('[:alpha:]',input)]
input[grepl('[:space:]',input)]
input[grepl('^[:alpha:]',input)]
grepl('^[:alpha:]','I am')
grepl('[[:alpha:]]',input)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
input <- ''
input <- removePunctuation(input)
input <- removeNumbers(input)
input <- rev(unlist(strsplit(input," ")))
input <- setdiff(input,sw)
input <- input[grepl('[[:alpha:]]',input)]
input <- paste(input[2],input[1],sep = ' ')
input <- tolower(input)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
source('models.R')
load('ngram0.RData')
predictKN2('data science',unigramDF,bigramDF,trigramDF)
predictKN('data science',unigramDF,bigramDF,trigramDF)
predictKN('data science',unigramDF,bigramDF,trigramDF)
source('models.R')
predictKN('data science',unigramDF,bigramDF,trigramDF)
shiny::runApp()
badwords <- readLines('badword.txt')
sw <- stopwords(kind = "en")
shiny::runApp()
shiny::runApp()
