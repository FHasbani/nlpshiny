{
    "contents" : "library(tm)\npredict0 <-function(input,unigramDF, bigramDF, trigramDF, maxResults = 3) {\n        badwords <- readLines('badword.txt')\n        sw <- stopwords(kind = \"en\")\n        input <- removePunctuation(input)\n        input <- removeNumbers(input)\n        input <- rev(unlist(strsplit(input,\" \")))\n        input <- setdiff(input,sw)\n        input <- input[grepl('[[:alpha:]]',input)]\n        input <- paste(input[2],input[1],sep = ' ')\n        input <- tolower(input) \n        if(input == ''|input == \"na na\") return('Warning: Just input something')\n        \n        seektri<-grepl(paste0(\"^\",input,\"$\"),trigramDF$bigram)\n        subtri<-trigramDF[seektri,]\n        input2 <- unlist(strsplit(input,\" \"))[2]\n        seekbi <- grepl(paste0(\"^\",input2,\"$\"),bigramDF$unigram)\n        subbi <- bigramDF[seekbi,]\n        unigramDF$s <- unigramDF$freq/nrow(unigramDF)*0.16\n        useuni <- unigramDF[order(unigramDF$s,decreasing = T),]\n        useunia <- useuni[1:maxResults,]\n        \n        if (sum(seektri) == 0) {\n                if(sum(seekbi)==0){\n                        return(head(unigramDF[order(unigramDF$freq,decreasing = T),1],maxResults))\n                }\n                subbi$s <- 0.4*subbi$freq/sum(seekbi)\n                names <- c(subbi$name,useunia$unigram)\n                score <- c(subbi$s,useunia$s)\n                predictWord <- data.frame(next_word=names,score=score,stringsAsFactors = F)\n                predictWord <- predictWord[order(predictWord$score,decreasing = T),]\n                # in case replicated\n                final <- unique(predictWord$next_word)\n                return(final[1:maxResults])\n        } \n        subbi$s <- 0.4*subbi$freq/sum(seekbi)\n        subtri$s <- subtri$freq/sum(subtri$freq)\n        names <- c(subtri$name,subbi$name,useunia$unigram)\n        score <- c(subtri$s,subbi$s,useunia$s)\n        predictWord <- data.frame(next_word=names,score=score,stringsAsFactors = F)\n        predictWord <- predictWord[order(predictWord$score,decreasing = T),]\n        # in case replicated\n        final <- unique(predictWord$next_word)\n        final <- final[1:maxResults]\n        final <- setdiff(final,badwords)\n        final <- final[grepl('[[:alpha:]]',final)]        \n        return(final)\n}\n\npredictKN2 <- function(input,D2,P,subbi,cw2,nw2,unigram,bigram,maxResults = 3){\n        # kick off to unigram if no bigram\n        if(nw2 == 0) {\n                return(head(unigram[order(unigram$freq,decreasing = T),1],maxResults))\n        }\n        cp <- unique(subbi$name)\n        pkn <- rep(NA,length(cp))\n        for(i in 1:length(cp)){\n                # get nw3 cw3 for smooth\n                nw3 <- sum(grepl(cp[i],bigram$name))\n                cw3 <- subbi[subbi$name == cp[i],2]\n                pkn[i] <- max((cw3-D2),0)/cw2 + P*nw3\n        }\n        predictWord <- data.frame(next_word=cp,probability=pkn,stringsAsFactors=FALSE)\n        predictWord <- predictWord[order(predictWord$probability,decreasing = T),]\n        final <- predictWord$next_word[!is.na(predictWord$next_word)]\n        final <- final[1:maxResults]\n        final <- unique(final)\n        final <- setdiff(final,badwords)\n        final <- final[grepl('[[:alpha:]]',final)]        \n        return(final)\n}\n\npredictKN <- function(input,unigramDF,bigramDF,trigramDF,maxResults = 3){\n        # get the freq of freq of n-gram to get D for smooth\n        uni.freqfreq <- data.frame(uni=table(unigramDF$freq))\n        bi.freqfreq <- data.frame(Bi=table(bigramDF$freq))\n        tri.freqfreq <- data.frame(Tri=table(trigramDF$freq))\n        # get D by Ney et al. by the total number of n-grams occurring exactly once (n1) and twice (n2)\n        D1 <- uni.freqfreq[1,2]/(uni.freqfreq[1,2]+2*uni.freqfreq[2,2])\n        D2 <- bi.freqfreq[1,2]/(bi.freqfreq[1,2]+2*bi.freqfreq[2,2])\n        D3 <- tri.freqfreq[1,2]/(tri.freqfreq[1,2]+2*tri.freqfreq[1,2])\n        # process the words\n        \n        sw <- stopwords(kind = \"en\")\n        input <- removePunctuation(input)\n        input <- removeNumbers(input)\n        input <- rev(unlist(strsplit(input,\" \")))\n        input <- setdiff(input,sw)\n        input <- input[grepl('[[:alpha:]]',input)]\n        input <- paste(input[2],input[1],sep = ' ')\n        input <- tolower(input)\n        if(input == ''|input == \"na na\") return('WARNING: Just input something')\n        input2 <- unlist(strsplit(input,\" \"))[2]\n        # get c(w1w2.), n(w1w2.) and n(.w2.) from trigram\n        seekcw1w2<-grepl(paste0(\"^\",input,\"$\"),trigramDF$bigram)\n        subtri<-trigramDF[seekcw1w2,]\n        cw1w2 <- sum(subtri$freq)\n        nw1w2 <- sum(seekcw1w2)\n        seekW2<-grepl(paste0(input2,\"$\"),trigramDF$bigram)\n        W2 <- sum(seekW2)\n        p3 <- D3*nw1w2/cw1w2\n        # get c(w2.), n(w2.) and n(..) from bigram\n        seekcw2 <- grepl(input2,bigramDF$unigram)\n        subbi <- bigramDF[seekcw2,]\n        cw2 <- sum(subbi$freq)\n        nw2 <- sum(seekcw2)\n        nw <- nrow(bigramDF)\n        p2 <- D3*nw2/cw2/nw\n        p1 <- D2*nw2/cw2/nw\n        if(cw1w2 == 0){\n                # kick off to 2-gram model\n                return(predictKN2(input2,D2,p1,subbi,cw2,nw2,unigramDF,bigramDF,maxResults = maxResults))\n        }\n        cp <- unique(subbi$name)\n        pkn <- rep(NA,length(cp))\n        for(i in 1:length(cp)){\n                # get nw3 nw2w3 and cw1w2w3 for smooth\n                nw3 <- sum(grepl(cp[i],bigramDF$name))\n                nw2w3 <- sum(grepl(paste0(input2,' ',cp[i],'$'),trigramDF$trigram))\n                cw1w2w3 <- subtri[subtri$name == cp[i],2]\n                pkn[i] <- max((cw1w2w3-D3),0)/cw1w2 + p3*(max((nw2w3-D3),0)/W2+ p2*nw3)\n        }\n        predictWord <- data.frame(next_word=cp,probability=pkn,stringsAsFactors=FALSE)\n        predictWord <- predictWord[order(predictWord$probability,decreasing = T),]\n        final <- predictWord$next_word[!is.na(predictWord$next_word)]\n        final <- final[1:maxResults]\n        final <- unique(final)\n        final <- setdiff(final,badwords)\n        final <- final[grepl('[[:alpha:]]',final)]        \n        return(final)\n}",
    "created" : 1412908307082.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3298116353",
    "id" : "5973CDC7",
    "lastKnownWriteTime" : 1412923810,
    "path" : "~/nlpshiny/models.R",
    "project_path" : "models.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}